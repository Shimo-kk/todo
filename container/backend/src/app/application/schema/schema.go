// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package schema

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CSRFModel defines model for CSRFModel.
type CSRFModel struct {
	Csrf string `json:"csrf"`
}

// CategoryCreateModel defines model for CategoryCreateModel.
type CategoryCreateModel struct {
	Name string `json:"name"`
}

// CategoryReadModel defines model for CategoryReadModel.
type CategoryReadModel struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// CategoryUpdateModel defines model for CategoryUpdateModel.
type CategoryUpdateModel struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// DefaultResponseModel defines model for DefaultResponseModel.
type DefaultResponseModel struct {
	Message string `json:"message"`
}

// PriorityReadModel defines model for PriorityReadModel.
type PriorityReadModel struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// SignInModel defines model for SignInModel.
type SignInModel struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// SignUpModel defines model for SignUpModel.
type SignUpModel struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// TaskCreateModel defines model for TaskCreateModel.
type TaskCreateModel struct {
	CategoryId int       `json:"category_id"`
	Detail     string    `json:"detail"`
	PriorityId int       `json:"priority_id"`
	StartDate  time.Time `json:"start_date"`
	Title      string    `json:"title"`
}

// TaskReadModel defines model for TaskReadModel.
type TaskReadModel struct {
	CategoryId int       `json:"category_id"`
	Detail     string    `json:"detail"`
	DoneFlag   bool      `json:"done_flag"`
	Id         int       `json:"id"`
	PriorityId int       `json:"priority_id"`
	StartDate  time.Time `json:"start_date"`
	Title      string    `json:"title"`
}

// TaskUpdateModel defines model for TaskUpdateModel.
type TaskUpdateModel struct {
	CategoryId int       `json:"category_id"`
	Detail     string    `json:"detail"`
	Id         int       `json:"id"`
	PriorityId int       `json:"priority_id"`
	StartDate  time.Time `json:"start_date"`
	Title      string    `json:"title"`
}

// UserReadModel defines model for UserReadModel.
type UserReadModel struct {
	Email string `json:"email"`
	Id    int    `json:"id"`
	Name  string `json:"name"`
}

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SignInModel

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody = SignUpModel

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryCreateModel

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryUpdateModel

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = TaskCreateModel

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = TaskUpdateModel

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api)
	GetApi(ctx echo.Context) error

	// (POST /api/auth/signin)
	SignIn(ctx echo.Context) error

	// (GET /api/auth/signout)
	SignOut(ctx echo.Context) error

	// (POST /api/auth/signup)
	SignUp(ctx echo.Context) error

	// (GET /api/csrf)
	GetCsrfToken(ctx echo.Context) error

	// (GET /api/v1/categories)
	GetAllCategory(ctx echo.Context) error

	// (POST /api/v1/category)
	CreateCategory(ctx echo.Context) error

	// (PUT /api/v1/category)
	UpdateCategory(ctx echo.Context) error

	// (DELETE /api/v1/category/{id})
	DeleteCategory(ctx echo.Context, id int) error

	// (GET /api/v1/category/{id})
	GetCategory(ctx echo.Context, id int) error

	// (GET /api/v1/priorities)
	GetAllPriority(ctx echo.Context) error

	// (POST /api/v1/task)
	CreateTask(ctx echo.Context) error

	// (PUT /api/v1/task)
	UpdateTask(ctx echo.Context) error

	// (GET /api/v1/task/done/{id})
	DoneTask(ctx echo.Context, id int) error

	// (DELETE /api/v1/task/{id})
	DeleteTask(ctx echo.Context, id int) error

	// (GET /api/v1/task/{id})
	GetTask(ctx echo.Context, id int) error

	// (GET /api/v1/tasks)
	GetAllTask(ctx echo.Context) error

	// (GET /api/v1/user)
	GetUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApi converts echo context to params.
func (w *ServerInterfaceWrapper) GetApi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApi(ctx)
	return err
}

// SignIn converts echo context to params.
func (w *ServerInterfaceWrapper) SignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignIn(ctx)
	return err
}

// SignOut converts echo context to params.
func (w *ServerInterfaceWrapper) SignOut(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignOut(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// GetCsrfToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetCsrfToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCsrfToken(ctx)
	return err
}

// GetAllCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllCategory(ctx)
	return err
}

// CreateCategory converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCategory(ctx)
	return err
}

// UpdateCategory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCategory(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCategory(ctx)
	return err
}

// DeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCategory(ctx, id)
	return err
}

// GetCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategory(ctx, id)
	return err
}

// GetAllPriority converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPriority(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllPriority(ctx)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// UpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTask(ctx)
	return err
}

// DoneTask converts echo context to params.
func (w *ServerInterfaceWrapper) DoneTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DoneTask(ctx, id)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTask(ctx, id)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx, id)
	return err
}

// GetAllTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTask(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api", wrapper.GetApi)
	router.POST(baseURL+"/api/auth/signin", wrapper.SignIn)
	router.GET(baseURL+"/api/auth/signout", wrapper.SignOut)
	router.POST(baseURL+"/api/auth/signup", wrapper.SignUp)
	router.GET(baseURL+"/api/csrf", wrapper.GetCsrfToken)
	router.GET(baseURL+"/api/v1/categories", wrapper.GetAllCategory)
	router.POST(baseURL+"/api/v1/category", wrapper.CreateCategory)
	router.PUT(baseURL+"/api/v1/category", wrapper.UpdateCategory)
	router.DELETE(baseURL+"/api/v1/category/:id", wrapper.DeleteCategory)
	router.GET(baseURL+"/api/v1/category/:id", wrapper.GetCategory)
	router.GET(baseURL+"/api/v1/priorities", wrapper.GetAllPriority)
	router.POST(baseURL+"/api/v1/task", wrapper.CreateTask)
	router.PUT(baseURL+"/api/v1/task", wrapper.UpdateTask)
	router.GET(baseURL+"/api/v1/task/done/:id", wrapper.DoneTask)
	router.DELETE(baseURL+"/api/v1/task/:id", wrapper.DeleteTask)
	router.GET(baseURL+"/api/v1/task/:id", wrapper.GetTask)
	router.GET(baseURL+"/api/v1/tasks", wrapper.GetAllTask)
	router.GET(baseURL+"/api/v1/user", wrapper.GetUser)

}
